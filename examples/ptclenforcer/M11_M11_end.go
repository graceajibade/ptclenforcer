package ptclenforcer

import (
	"school/project/simplelib"
) 

// Autogenerated Typestate API

type S01 struct {
	Prtcl *simplelib.SimpleStruct
	finalState *bool
	used bool
}

type S11 struct {
	Prtcl *simplelib.SimpleStruct
	finalState *bool
	used bool
}

type E01 struct {
	Prtcl *simplelib.SimpleStruct
	finalState *bool
	used bool
}

type E01Checker struct {
	finalState *bool
}

func (f *E01Checker) FinalizeChecker() func() {
	return func() {
		if f.finalState == nil || !*f.finalState {
			panic("Final state was not reached")
		}
	}
}

func NewS01(prtcl ...*simplelib.SimpleStruct) (*S01, *E01Checker) {
	finalReached := false
	checker := &E01Checker{finalState: &finalReached}
	var p *simplelib.SimpleStruct
	if len(prtcl) > 0 && prtcl[0] != nil {
		p = prtcl[0]
	} else {
		p = &simplelib.SimpleStruct{}
	}
	return &S01{
		Prtcl: p,
		finalState: &finalReached,
		used: false,
	}, checker
}

// S01 - M11 -> S11
func (x *S01) M11() (S11, string) {
	if x.used {
		panic("S01 has been used")
	}
	x.used = true
	res0 := x.Prtcl.M1()
	return S11{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

// S11 - M11 -> E01
func (x *S11) M11() (E01, string) {
	if x.used {
		panic("S11 has been used")
	}
	x.used = true
	res0 := x.Prtcl.M1()
	*x.finalState = true
	return E01{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

