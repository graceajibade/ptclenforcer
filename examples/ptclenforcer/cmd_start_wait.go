package ptclenforcer

import (
	"os/exec"
) 

// Autogenerated Typestate API

type Started struct {
	Prtcl *exec.Cmd
	finalState *bool
	used bool
}

type Initialized struct {
	Prtcl *exec.Cmd
	finalState *bool
	used bool
}

type Waited struct {
	Prtcl *exec.Cmd
	finalState *bool
	used bool
}

type WaitedChecker struct {
	finalState *bool
}

func (f *WaitedChecker) FinalizeChecker() func() {
	return func() {
		if f.finalState == nil || !*f.finalState {
			panic("Final state was not reached")
		}
	}
}

func NewInitialized(prtcl ...*exec.Cmd) (*Initialized, *WaitedChecker) {
	finalReached := false
	checker := &WaitedChecker{finalState: &finalReached}
	var p *exec.Cmd
	if len(prtcl) > 0 && prtcl[0] != nil {
		p = prtcl[0]
	} else {
		p = &exec.Cmd{}
	}
	return &Initialized{
		Prtcl: p,
		finalState: &finalReached,
		used: false,
	}, checker
}

// Initialized - Start -> Started
func (x *Initialized) Start() (Started, error) {
	if x.used {
		panic("Initialized has been used")
	}
	x.used = true
	res0 := x.Prtcl.Start()
	return Started{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

// Started - Wait -> Waited
func (x *Started) Wait() (Waited, error) {
	if x.used {
		panic("Started has been used")
	}
	x.used = true
	res0 := x.Prtcl.Wait()
	*x.finalState = true
	return Waited{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

