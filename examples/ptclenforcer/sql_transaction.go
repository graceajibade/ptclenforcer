package ptclenforcer

import (
	"database/sql"
) 

// Autogenerated Typestate API

type Queried struct {
	Prtcl *sql.Tx
	finalState *bool
	used bool
}

type TxStarted struct {
	Prtcl *sql.Tx
	finalState *bool
	used bool
}

type TxFinished struct {
	Prtcl *sql.Tx
	finalState *bool
	used bool
}

type TxFinishedChecker struct {
	finalState *bool
}

func (f *TxFinishedChecker) FinalizeChecker() func() {
	return func() {
		if f.finalState == nil || !*f.finalState {
			panic("Final state was not reached")
		}
	}
}

func NewTxStarted(prtcl ...*sql.Tx) (*TxStarted, *TxFinishedChecker) {
	finalReached := false
	checker := &TxFinishedChecker{finalState: &finalReached}
	var p *sql.Tx
	if len(prtcl) > 0 && prtcl[0] != nil {
		p = prtcl[0]
	} else {
		p = &sql.Tx{}
	}
	return &TxStarted{
		Prtcl: p,
		finalState: &finalReached,
		used: false,
	}, checker
}

// TxStarted - Exec -> Queried
func (x *TxStarted) Exec(query string, args ...any) (Queried, sql.Result, error) {
	if x.used {
		panic("TxStarted has been used")
	}
	x.used = true
	res0, res1 := x.Prtcl.Exec(query, args...)
	return Queried{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0, res1
}

// Queried - Commit -> TxFinished
func (x *Queried) Commit() (TxFinished, error) {
	if x.used {
		panic("Queried has been used")
	}
	x.used = true
	res0 := x.Prtcl.Commit()
	*x.finalState = true
	return TxFinished{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

// Queried - Rollback -> TxFinished
func (x *Queried) Rollback() (TxFinished, error) {
	if x.used {
		panic("Queried has been used")
	}
	x.used = true
	res0 := x.Prtcl.Rollback()
	*x.finalState = true
	return TxFinished{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

