package ptclenforcer

import (
	"school/project/simplelib"
) 

// Autogenerated Typestate API

type S02 struct {
	Prtcl *simplelib.SimpleStruct
	finalState *bool
	used bool
}

type S12 struct {
	Prtcl *simplelib.SimpleStruct
	finalState *bool
	used bool
}

type E02 struct {
	Prtcl *simplelib.SimpleStruct
	finalState *bool
	used bool
}

type E02Checker struct {
	finalState *bool
}

func (f *E02Checker) FinalizeChecker() func() {
	return func() {
		if f.finalState == nil || !*f.finalState {
			panic("Final state was not reached")
		}
	}
}

func NewS02(prtcl ...*simplelib.SimpleStruct) (*S02, *E02Checker) {
	finalReached := false
	checker := &E02Checker{finalState: &finalReached}
	var p *simplelib.SimpleStruct
	if len(prtcl) > 0 && prtcl[0] != nil {
		p = prtcl[0]
	} else {
		p = &simplelib.SimpleStruct{}
	}
	return &S02{
		Prtcl: p,
		finalState: &finalReached,
		used: false,
	}, checker
}

// S02 - M12 -> S12
func (x *S02) M12() (S12, string) {
	if x.used {
		panic("S02 has been used")
	}
	x.used = true
	res0 := x.Prtcl.M1()
	return S12{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

// S12 - M21 -> E02
func (x *S12) M21() (E02, string) {
	if x.used {
		panic("S12 has been used")
	}
	x.used = true
	res0 := x.Prtcl.M2()
	*x.finalState = true
	return E02{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

