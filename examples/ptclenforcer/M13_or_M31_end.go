package ptclenforcer

import (
	"school/project/simplelib"
) 

// Autogenerated Typestate API

type S03 struct {
	Prtcl *simplelib.SimpleStruct
	finalState *bool
	used bool
}

type E03 struct {
	Prtcl *simplelib.SimpleStruct
	finalState *bool
	used bool
}

type E03Checker struct {
	finalState *bool
}

func (f *E03Checker) FinalizeChecker() func() {
	return func() {
		if f.finalState == nil || !*f.finalState {
			panic("Final state was not reached")
		}
	}
}

func NewS03(prtcl ...*simplelib.SimpleStruct) (*S03, *E03Checker) {
	finalReached := false
	checker := &E03Checker{finalState: &finalReached}
	var p *simplelib.SimpleStruct
	if len(prtcl) > 0 && prtcl[0] != nil {
		p = prtcl[0]
	} else {
		p = &simplelib.SimpleStruct{}
	}
	return &S03{
		Prtcl: p,
		finalState: &finalReached,
		used: false,
	}, checker
}

// S03 - M13 -> E03
func (x *S03) M13() (E03, string) {
	if x.used {
		panic("S03 has been used")
	}
	x.used = true
	res0 := x.Prtcl.M1()
	*x.finalState = true
	return E03{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

// S03 - M31 -> E03
func (x *S03) M31() (E03, string) {
	if x.used {
		panic("S03 has been used")
	}
	x.used = true
	res0 := x.Prtcl.M2()
	*x.finalState = true
	return E03{Prtcl: x.Prtcl, finalState: x.finalState, used: false}, res0
}

